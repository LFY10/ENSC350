LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
 
LIBRARY WORK;
USE WORK.ALL;

----------------------------------------------------------------------
--
--  This is the top level template for Lab 02.  Use the schematic on Page 3
--  of the lab handout to guide you in creating this structural description.
--  The combinational blocks have already been designed in previous tasks,
--  and the spinwheel block is given to you.  Your task is to combine these
--  blocks, as well as add the various registers shown on the schemetic, and
--  wire them up properly.  The result will be a roulette game you can play
--  on your DE2.
--
-----------------------------------------------------------------------

ENTITY roulette IS
	PORT(   CLOCK_50 : IN STD_LOGIC; -- the fast clock for spinning wheel
		KEY : IN STD_LOGIC_VECTOR(3 downto 0);  -- includes slow_clock and reset
		SW : IN STD_LOGIC_VECTOR(17 downto 0);
		LEDG : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);  -- ledg
		HEX7 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 7
		HEX6 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 6
		HEX5 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 5
		HEX4 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 4
		HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 3
		HEX2 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 2
		HEX1 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 1
		HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)   -- digit 0
	);
END roulette;


ARCHITECTURE structural OF roulette IS
	signal slow_clk: std_logic := '0';
	signal slow_spin_result: unsigned(5 downto 0) := (others => '0');
	signal fast_spin_result: unsigned(5 downto 0);
	signal cooldown: unsigned(23 downto 0) := (others => '0');
	signal bet1_value: unsigned(5 downto 0) := (others => '0');
	signal bet2_colour: std_logic := '0';
	signal bet3_dozen: unsigned(1 downto 0) := (others => '0');
	signal bet1_amount: unsigned(2 downto 0) := (others => '0');
	signal bet2_amount: unsigned(2 downto 0) := (others => '0');
	signal bet3_amount: unsigned(2 downto 0) := (others => '0');
	signal money: unsigned(11 downto 0) := to_unsigned(32, 12);
	signal new_money: unsigned(11 downto 0);
	signal bet1_wins: std_logic := '0';
	signal bet2_wins: std_logic := '0';
	signal bet3_wins: std_logic := '0';
	
	component spinwheel is
		PORT(
		fast_clock : IN  STD_LOGIC;  -- This will be a 27 Mhz Clock
		resetb : IN  STD_LOGIC;      -- asynchronous reset
		spin_result  : OUT UNSIGNED(5 downto 0));  -- current value of the wheel
	end component;
	
	component win IS
	PORT(spin_result_latched : in unsigned(5 downto 0);  -- result of the spin (the winning number)
             bet1_value : in unsigned(5 downto 0); -- value for bet 1
             bet2_colour : in std_logic;  -- colour for bet 2
             bet3_dozen : in unsigned(1 downto 0);  -- dozen for bet 3
             bet1_wins : out std_logic;  -- whether bet 1 is a winner
             bet2_wins : out std_logic;  -- whether bet 2 is a winner
             bet3_wins : out std_logic); -- whether bet 3 is a winner
	end component;
	
	component new_balance IS
	PORT(money : in unsigned(11 downto 0);  -- Current balance before this spin
       value1 : in unsigned(2 downto 0);  -- Value of bet 1
       value2 : in unsigned(2 downto 0);  -- Value of bet 2
       value3 : in unsigned(2 downto 0);  -- Value of bet 3
       bet1_wins : in std_logic;  -- True if bet 1 is a winner
       bet2_wins : in std_logic;  -- True if bet 2 is a winner
       bet3_wins : in std_logic;  -- True if bet 3 is a winner
       new_money : out unsigned(11 downto 0));  -- balance after adding winning
                                                -- bets and subtracting losing bets
	end component;
	
	component digit7seg is
	PORT(
          digit : IN  UNSIGNED(3 DOWNTO 0);  -- number 0 to 0xF
          seg7 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)  -- one per segment
	);
	end component;
BEGIN
 --- Your code goes here
	spinwheel_map: spinwheel PORT MAP (CLOCK_50, KEY(1), fast_spin_result);
	win_map: win PORT MAP (slow_spin_result, bet1_value, bet2_colour, bet3_dozen, bet1_wins, bet2_wins, bet3_wins);
	new_balance_map: new_balance PORT MAP (money, bet1_amount, bet2_amount, bet3_amount, bet1_wins, bet2_wins, bet3_wins, new_money);
	
	spin_lo: digit7seg PORT MAP (slow_spin_result(3 downto 0), HEX6);
	spin_hi: digit7seg PORT MAP (B"00" & slow_spin_result(5 downto 4), HEX7);
	
	bal1: digit7seg PORT MAP (new_money(11 downto 8), HEX2);
	bal2: digit7seg PORT MAP (new_money(7 downto 4), HEX1);
	bal3: digit7seg PORT MAP (new_money(3 downto 0), HEX0);
	
	LEDG(0) <= bet1_wins;
	LEDG(1) <= bet2_wins;
	LEDG(2) <= bet3_wins;
 
	process(CLOCK_50, KEY(0))
	begin
		if (rising_edge(CLOCK_50)) then
			if (cooldown = 0) then
				if (NOT(KEY(0)) /= slow_clk) then
					slow_clk <= NOT(KEY(0));
					cooldown <= to_unsigned(12500000, 24); -- 250ms
				end if;
			else
				cooldown <= cooldown - 1;
			end if;
		end if;
	end process;
	
	process(slow_clk, KEY(1))
	begin
		if (KEY(1) = '0') then
			-- async reset
			slow_spin_result <= (others => '0');
			bet1_value <= (others => '0');
			bet2_colour <= '0';
			bet3_dozen <= (others => '0');
			bet1_amount <= (others => '0');
			bet2_amount <= (others => '0');
			bet3_amount <= (others => '0');
			money <= to_unsigned(32, 12);
		elsif (rising_edge(slow_clk)) then
			slow_spin_result <= fast_spin_result;
			bet1_value <= unsigned(SW(8 downto 3));
			bet2_colour <= SW(12);
			bet3_dozen <= unsigned(SW(17 downto 16));
			bet1_amount <= unsigned(SW(2 downto 0));
			bet2_amount <= unsigned(SW(11 downto 9));
			bet3_amount <= unsigned(SW(15 downto 13));
			money <= new_money;
		end if;	
	end process;
END;
