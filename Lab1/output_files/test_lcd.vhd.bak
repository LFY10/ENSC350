
-- This is a simple design which connects the important LCD signals
-- to switches.  You can use this to play with the LCD and make sure
-- that you understand how it works in hardware. 
-- If you have any questions on this, you should talk to 
-- your TA.


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity test_lcd is
     port(
        KEY : in std_logic_vector(3 downto 0);  -- pushbutton switches
        SW : in std_logic_vector(8 downto 0);  -- slide switches
        LEDG : out std_logic_vector(7 downto 0); -- green LED's (you might want to use
                                                 -- this to display your current state)
        LCD_RW : out std_logic;  -- R/W control signal for the LCD
        LCD_EN : out std_logic;  -- Enable control signal for the LCD
        LCD_RS : out std_logic;  -- Whether or not you are sending an instruction or character
        LCD_ON : out std_logic;  -- used to turn on the LCD
        LCD_BLON : out std_logic; -- used to turn on the backlight
        LCD_DATA : out std_logic_vector(7 downto 0));  -- used to send instructions or characters
end test_lcd ;


architecture behavioural of test_lcd is
begin

        LCD_BLON <= '1';   -- backlight is always on
        LCD_ON <= '1';     -- LCD is always on
        LCD_EN <= KEY(0);  -- connect the clock to the LCD_en input
        LCD_RW <= '0';     -- always writing to the LCD
        LCD_RS <= SW(8);   -- connect to slider switch 8
        LCD_DATA <= SW(7 downto 0);   -- connect to slider switches 7 to 0

        LEDG(0) <= KEY(0);  -- send the clock to a green light, to help you debug 

end behavioural;